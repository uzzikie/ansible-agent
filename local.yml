- name: "Get Facts"
  hosts: localhost
  connection: local 
  gather_facts: false
  tasks:

##############################################

  - name: Check cPanel file exists
    stat:
      path: /usr/local/cpanel/version
    register: cpanel_exist

  - name: Get cPanel Version
    when: cpanel_exist.stat.exists
    shell:
      "cat /usr/local/cpanel/version"
    register: cpanel

  - name: Get cPanel ImunifyAV
    when: cpanel_exist.stat.exists
    shell:
      "rpm -qa | grep imunify-antivirus"
    ignore_errors: true
    register: imunifyav

  - name: Setting cPanel facts
    when: cpanel_exist.stat.exists
    ansible.builtin.set_fact:
      cacheable: yes
      cpanel_version: "{{ cpanel.stdout }}"
      cpanel_imunifyav: "{{ imunifyav.stdout }}"

##############################################

  - name: Check Plesk file exists
    stat:
      path: /usr/local/psa/version
    register: plesk_exist

  - name: Get Plesk Version
    when: plesk_exist.stat.exists
    shell:
      "cat /usr/local/psa/version"
    register: plesk

  - name: Get Plesk ImunifyAV
    when: plesk_exist.stat.exists
    shell:
      "plesk bin extension -l | grep ImunifyAV"
    ignore_errors: true  
    register: imunifyav

  - name: Setting Plesk facts
    when: plesk_exist.stat.exists
    ansible.builtin.set_fact:
      cacheable: yes
      plesk_version: "{{ plesk.stdout }}"
      plesk_imunifyav: "{{ imunifyav.stdout }}"

##############################################

  - name: Get Sentinel EDR Info
    shell:
      "rpm -qa | grep -i sentinel"
    ignore_errors: true
    register: sentinel

  - name: Setting Sentinel facts
    ansible.builtin.set_fact:
      cacheable: yes
      sentinel_agent: "{{ sentinel.stdout }}"


##############################################

  - name: Get CPU Info
    shell:
      "cat /proc/cpuinfo | grep 'model name' | uniq | sed 's/^.*: //'"
    register: cpu

  - name: Setting CPU facts
    ansible.builtin.set_fact:
      cacheable: yes
      cpu_model: "{{ cpu.stdout }}"

##############################################

  - name: Check that the reboot-required exists
    stat:
      path: /var/run/reboot-required
    register: reboot_exist

  - name: Setting Reboot facts
    when: reboot_exist.stat.exists
    ansible.builtin.set_fact:
      cacheable: yes
      reboot_required: true

##############################################

  - name: "Re-run setup to use custom facts"
    setup: ~

##############################################

  - name: Copy Ansible facts to a file
    copy:
      content: "{{ ansible_facts }}"
      dest: /tmp/ansible_facts_details.json

  - name: Delete keys
    replace:
      path: /tmp/ansible_facts_details.json
      regexp: '"{{ item }}": "[^"]*",'
      replace: ''
    loop:
    - ssh_host_key_dsa_public
    - ssh_host_key_ecdsa_public
    - ssh_host_key_ed25519_public
    - ssh_host_key_rsa_public
    - ssh_host_pub_keys
    - ssh_pub_keys 

  - block:
      - name: Send Facts Using Curl
        shell: 'curl https://systemditor.com/import.php -u "{{ ansible_local.htaccess.login.user }}:{{ ansible_local.htaccess.login.password }}" -d @/tmp/ansible_facts_details.json'
        ignore_errors: true
        register: curl_output

      - name: Print Curl output
        debug:
          msg: "{{ curl_output }}"      


    rescue:
      - name: Send Facts Using URI
        ignore_errors: true
        register: uri_output
        uri: 
          url: "https://systemditor.com/import.php"
          method: POST
          return_content: yes
          body_format: json
          body: "{{ lookup('file','/tmp/ansible_facts_details.json') }}"
          user: "{{ ansible_local.htaccess.login.user }}"
          password: "{{ ansible_local.htaccess.login.password }}"
          force_basic_auth: yes

      - name: Print URI output
        debug:
          msg: "{{ uri_output }}"  



      